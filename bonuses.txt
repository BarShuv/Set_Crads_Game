BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

Every place instead of writing constant number we use the config constant variable, or in case it wan not exists -
we created relevant constant variable in the file and use it where needed. (i.e: BEAT_TIME const in Player.java).
It is not really needed tests because constants are well-known concept.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.
Implementation in our code - when creating the code we iterate over the players array from the 0 index to the last index
(which in this point and next the order of the players in this array won't be changed), when terminating the threads we
iterate in a reverse order (from last index to 0 index).
It is use in the Dealer.java in the runPlayersThreads and terminate functions.
We tested it ... . (TODO: Complete this part later).

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

We are not entitled to this bonus.
